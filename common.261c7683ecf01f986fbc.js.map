{"version":3,"sources":["./src/app/core/offlineOrders/offlineOrders.service.ts"],"names":[],"mappings":"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","file":"common.261c7683ecf01f986fbc.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Observable, of } from \"rxjs\";\nimport { OfflineOrdersModel } from \"./offlineOrders.model\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { environment } from \"../../../environments/environment\";\nimport { QueryResultsModel } from \"../_base/crud\";\n\nimport * as FileSaver from \"file-saver\";\nimport { QueryOfflineOrdersModel } from \"./queryofflineOrders.model\";\nimport axios from \"axios\";\n\nconst API_ORDEROFFLINE_URL = `${environment.baseAPI}/api/order-offlines`;\nconst API_CSV = `${environment.baseAPI}/api/excel/offlineOrders/export`;\n\n@Injectable({\n\tprovidedIn: \"root\",\n})\nexport class OfflineOrdersService {\n\tconstructor(private http: HttpClient) {}\n\t// get list block group\n\tgetListOfflineOrders(queryParams: any): Observable<any> {\n\t\treturn new Observable((observer) => {\n\t\t\taxios\n\t\t\t\t.get(`${API_ORDEROFFLINE_URL}?sort[createdAt]=desc&pagination[pageSize]=${queryParams.limit}&pagination[page]=${queryParams.pageNumber}&filters[invoice_number][$containsi]=${queryParams.text ? queryParams.text : \"\"}`)\n\t\t\t\t.then((res: any) => {\n\t\t\t\t\tconst response = {\n\t\t\t\t\t\tstatus: \"success\",\n\t\t\t\t\t\tdata: res.data.data,\n\t\t\t\t\t\ttotalCount: res.data.meta.pagination.total,\n\t\t\t\t\t};\n\t\t\t\t\tobserver.next(response);\n\t\t\t\t\tobserver.complete();\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tconsole.error(\"Error fetching data:\", error);\n\t\t\t\t\tobserver.error(error);\n\t\t\t\t});\n\t\t});\n\t}\n\n\t// get list all no filter\n\tgetListOfflineOrdersAll(): Observable<any> {\n\t\treturn new Observable((observer) => {\n\t\t\taxios\n\t\t\t\t.get(`${API_ORDEROFFLINE_URL}?fields[0]=id`)\n\t\t\t\t.then((res: any) => {\n\t\t\t\t\tconst response = {\n\t\t\t\t\t\tstatus: \"success\",\n\t\t\t\t\t\tdata: res.data.data,\n\t\t\t\t\t\ttotalCount: res.data.meta.pagination.total,\n\t\t\t\t\t};\n\t\t\t\t\tobserver.next(response);\n\t\t\t\t\tobserver.complete();\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tconsole.error(\"Error fetching data:\", error);\n\t\t\t\t\tobserver.error(error);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tfindOfflineOrdersById(id: string): Observable<any> {\n\t\treturn new Observable((observer) => {\n\t\t\taxios\n\t\t\t\t.get(`${API_ORDEROFFLINE_URL}/${id}?populate=order_details`)\n\t\t\t\t.then((res: any) => {\n\t\t\t\t\tobserver.next(res.data);\n\t\t\t\t\tobserver.complete();\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tconsole.error(\"Error fetching data:\", error);\n\t\t\t\t\tobserver.error(error);\n\t\t\t\t});\n\t\t});\n\t}\n\tdeleteOfflineOrders(offlineOrdersId: string) {\n\t\tconst url = `${API_ORDEROFFLINE_URL}/delete/${offlineOrdersId}`;\n\t\treturn this.http.delete(url);\n\t}\n\n\tupdateOfflineOrders(offlineOrders: OfflineOrdersModel) {\n\t\treturn new Observable((observer) => {\n\t\t\taxios\n\t\t\t\t.put(`${API_ORDEROFFLINE_URL}/${offlineOrders.id}`, offlineOrders)\n\t\t\t\t.then((res: any) => {\n\t\t\t\t\tobserver.next(res);\n\t\t\t\t\tobserver.complete();\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t\tobserver.error(error);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tcreateOfflineOrders(body: any): Observable<any> {\n\t\treturn new Observable((observer) => {\n\t\t\taxios\n\t\t\t\t.post(`${API_ORDEROFFLINE_URL}`, body)\n\t\t\t\t.then((res: any) => {\n\t\t\t\t\tobserver.next(res);\n\t\t\t\t\tobserver.complete();\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t\tobserver.error(error);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate handleError<T>(operation = \"operation\", result?: any) {\n\t\treturn (error: any): Observable<any> => {\n\t\t\t// TODO: send the error to remote logging infrastructure\n\t\t\tconsole.error(error); // log to console instead\n\t\t\t// Let the app keep running by returning an empty result.\n\t\t\treturn of(result);\n\t\t};\n\t}\n\n\tgenerateOfflineOrdersCode(): Observable<QueryResultsModel> {\n\t\tconst url = `${API_ORDEROFFLINE_URL}/generate/code`;\n\t\treturn this.http.get<QueryResultsModel>(url);\n\t}\n\n\texportExcel() {\n\t\treturn FileSaver.saveAs(`${API_CSV}`, \"export-offlineOrders.xlsx\");\n\t}\n}\n"],"sourceRoot":"webpack:///"}